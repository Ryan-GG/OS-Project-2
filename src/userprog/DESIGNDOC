            +----------------------------+
       	    |          CS 450            |
            | PROJECT 2: USER PROGRAMS I |
            |      DESIGN DOCUMENT     	 |
            +----------------------------+

---- GROUP ----

>> Fill in the names and email addresses of your group members.

Gabriel Doon doongs@dukes.jmu.edu
Ryan Gross grossrd@dukes.jmu.edu
Sydney May may4sa@dukes.jmu.edu
Katherine Shepherd shephekl@dukes.jmu.edu

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, please give 
>> them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.

Implementation of put_user taken from Pintos documentation (userprog.texi).

			   ARGUMENT PASSING
			   ================

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

>> thread.h - struct thread
    struct list children_list;
        List of children
    struct list_elem child_elem;
        Element to connect child to parent’s list of children
    int exit_status;
        Stores thread’s exit status
    int wait_status;
    Stores what to do if parent is waiting (0: still going, 
      1: killed but parent is unaware, 2: killed and process_wait 
      has been called)

These addittions to the thread struct enable parent threads to track their child processes so that they can sleep, wake, and exit based on the status of their children.

---- ALGORITHMS ----

>> A2: Briefly describe how you implemented argument parsing.  How do
>> you arrange for the elements of argv[] to be in the right order?
>> How do you avoid overflowing the stack page?

Argument passing is handled in the setup_stack function. Prior to that, command line arguments are tokenized into argv[] during the call to process_execute. The tokenized argv is then iterated through in reverse order. The pointer is then decremented by the length of the argument at the current index, plus the null terminator. The argument is 'placed onto the stack' by using memcpy from the vector to the current location of the stack pointer esp. The pointers to these arguments are stored locally, so that they can then be placed onto the stack. The system is 32-bit; therefore, each pointer will only be 4 bytes wide unlike the tokenized arguments which can vary in length. Stack page overflow is avoided by imposing a length limit on the argv string before tokenization. 


---- RATIONALE ----

>> A3: Why does Pintos implement strtok_r() but not strtok()?

strtok_r() is a re-entrant function while strtok() is not. The benefit of a re-entrant function is it runs based off of a non-global state. By doing this, it allows for multi-threading without the risk of an interrupt being issued and having another thread attempt to access the same resources, potentially corrupting the data.

>> A4: In Pintos, the kernel separates commands into a executable name
>> and arguments.  In Unix-like systems, the shell does this
>> separation.  Identify at least two advantages of the Unix approach.

The unix mode minimizes the time spent in kernel execution, allowing more time to user processes. This also allows for the shell process to handle its own error checking and recovery rather than having the kernel handle it. This is advantageous because recovring from an error at kernel level will be time expensive and likely to block user processes from being scheduled. The unix mode also enables the shell to provide its own syntax for command line argument entry. The kernel mode imposes more limitations on argument entry, for example, it is assumed that the executable's filename is the first argument tokenized.